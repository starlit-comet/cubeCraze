<%- include('partials/headSection.ejs') %>
</head>

<body>
    <%- include('partials/header.ejs') %>

    <%- include('partials/mobileMenu.ejs') %>
   

<main class="main">
        <div class="page-header breadcrumb-wrap" >
            <div class="container">
                <div class="breadcrumb">
                    <a href="home" rel="nofollow">Home</a>
                    <span></span> <a href="/profile" rel="nofollow">Profile</a>

                    <span></span> <a href="/cart" rel="nofollow">Cart</a>
                    <span></span> CheckOut
                </div>
            </div>
        </div>

        <section class="mt-50 mb-50">
            <div class="container">
               
                <div class="row">
                    <div class="col-md-5 ">
                        <div class="mb-25">
                            <h3>Billing Details</h3>
                            <h6>Choose your Address or Add a new one</h6>
                        </div>
                         <form id = 'checkoutForm'>
                            <div class="row">

                                <% addressData.forEach((data,index)=> {  %>
                                    <div class="col-lg-6 mt-20">
                                    <div class="card mb-3 mb-lg-0">
                                        <div class="card-header">
                                            <div class="row">
                                                <div class="col-10">

                                                    <h5 class="mb-0"><%= data.addressType %> Address 
                                                    </h5>
                                                </div>
                                                <div class="col-2">

                                                    <input type="radio"style="height: min-content;" class="text-end " name="selectedAddress" value="<%= data._id %>" <%= index === 0 ? 'checked' : '' %> />
                                                </div>
                                            </div>

                                        </div>
                                        <div class="card-body">
                                            <address><%= data.fullname %><br> <%= data.house_flat %>,&nbsp;  <%= data.street %><br> <%= data.village_city %>. <br><%= data.district %>
                                            ,<%= data.state %>,<br> PIN Code: <%= data.pincode %>
                                            <% if (data.landmark){ %>
                                                <br>LandMark: <%= data.landmark %>
                                            <%}%>
                                            <br>Phone: <%= data.mobile %>
                                            <% if (data.alt_phone){ %>
                                                <br>Alternate Number: <%= data.alt_phone %>
                                            <%}%>

                                        </address>
                                        <div class="row">
                                                 <button class="btn btn-fill-out btn-small mt-20 col-4 ml-20" type="button" onclick="window.location.href='/editAddress/<%=data._id%>'"> Edit</button>
                                                </div>
                                        </div>
                                    </div>
                                </div>
                                <% }) %>
                            </div>
                            <div class="ship_detail mt-20">
                                <div class="form-group">
                                    <div class="chek-form">
                                        <div class="custome-checkbox">
                                            <input class="form-check-input"  type="checkbox" name="selectedAddress" id="differentaddress">
                                            <label class="form-check-label label_info" data-bs-toggle="collapse" data-target="#collapseAddress" href="#collapseAddress" aria-controls="collapseAddress" for="differentaddress"><span>
                                              <% if ( addressData.length==0) { %>
                                              Add new Address?
                                              <% } else { %>
                                              Ship to a different address?
                                              <% } %>
                                            </span></label>
                                        </div>
                                    </div>
                                </div>
                                <div id="collapseAddress" class="different_address collapse in">
                                    <div class="col-md-12 mt-15 mb-20 form-group">
                                        <a id="addNewAddressBtn" class="btn btn-fill-out">Add New Address</a>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-20">
                                <h5>Additional information</h5>
                            </div>
                            <div class=" mb-30">
                                <textarea rows="1" style="width: 50%; min-height: 10%;" id="additionalInformation" placeholder="Order notes"></textarea>
                            </div>
                </div>
                    <div class="col-md-7">
                        <div class="order_review">
                            <div class="mb-10">
                                <h4>Your Orders</h4>
                            </div>
                            <div class="table-responsive order_table text-center">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th colspan="2">Product</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% cart.forEach(item=>{  %>
                                        <tr>
                                            <td class="image product-thumbnail"><img src="<%= item.productImages[0] %>" alt="#"></td>
                                            <td>
                                                <h5><a href=""><%= item.productName%></a></h5> <span class="product-qty">₹ <%= item.promotionalPrice %> x <%= item.cartQuantity %></span>
                                            </td>
                                            <td><%= item.cartQuantity * item.promotionalPrice %></td>
                                        </tr>
                                        <%})%>
                                        <tr>
                                            <td >Cost of Products</td>
                                            <td>No.of Items: <%= totalQuantity%></td>
                                            <td> ₹ <%= totalAmount %></td>
                                        </tr>
                                        <tr>
                                            <td > <b>Final Price</b></td>
                                            <td><div class="row">
                                              <div class="col-">
                                                Shipping Charge: <%= shipping%>
                                              </div>
                                              <% if(couponVal){ %>
                                                <div class="col-12">
                                                  <h6>Coupon Applied: <%=couponVal %></h6>
                                                </div>
                                                <%}%>
                                            </div>
                                          </td>
                                            <td> ₹ <%= grandTotal %></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="bt-1 border-color-1 mt-30 mb-30"></div>
                            <div class="mb-4">
                              <label for="couponSelect" class="form-label h6 ">Select Coupon</label>
                              <select id="couponSelect" class="form-control">
                                  <option value="" selected disabled>Select a coupon</option>
                                  <% coupons.forEach(item=>{  %>
                                  <option value="<%= item.code %>"><%=item.name%>-<%=item.code %></option>
                                  <% }) %>
                              </select>
                          </div>
                          <button id="applyCoupon" class="btn btn-primary">Apply Coupon</button>
                          <button id="removeCoupon" class="btn btn-primary">Remove Coupon</button>
                          
                          <p id="discountInfo" style="margin-top:10px; font-weight:bold;"></p>
                          
                            <div class="payment_method">
                                <div class="mb-25">
                                    <h5>Choose Payment Type</h5>
                                </div>
                                <div class="payment_option">
                                    <div class="custome-radio">
                                        <input class="form-check-input" required="" type="radio" name="payment_option" id="exampleRadios1" value="razorpay" checked="">
                                        <label class="form-check-label" for="exampleRadios1" data-bs-toggle="collapse" data-target="#razorpay" aria-controls="razorpay">Pay Now - Via RazorPay (UPI, CardPayments or Net Banking)</label>
                                    </div>
                                    <div class="custome-radio">
                                        <input class="form-check-input" required="" type="radio" name="payment_option" id="exampleRadios2" value="cod" checked="">
                                        <label class="form-check-label" for="exampleRadios2" data-bs-toggle="collapse" data-target="#cod" aria-controls="cod">Cash on Delivery (COD)</label>
                                    </div>
                                    <div class="custome-radio">
                                        <input class="form-check-input" required="" type="radio" name="payment_option" id="exampleRadios5" value="wallet" checked="">
                                        <label class="form-check-label" for="exampleRadios5" data-bs-toggle="collapse" data-target="#wallet" aria-controls="wallet">Pay from Wallet</label>
                                    </div>
                                </div>
                            </div>
                            <button type="submit"  class="btn btn-fill-out btn-block mt-30">Place Order</button>
                        </div>
                    </form> 
                    </div>
                </div>
            </div>
        </section>
        </main>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>

          
$(document).ready(function () {

$('#addNewAddressBtn').on('click', function () {
    Swal.fire({
        title: 'Add New Address',
        html: `
            <form id="addAddressForm" onsubmit="return false;">
                <h4>Name & Phone </h4>
                <div class="row">
                    <div class="form-group col-6">
                        <label for="username">Full Name:</label>
                        <input type="text" id="username" name="fullname" placeholder="Enter your full name">
                        <small class="text-danger" id="error-username"></small>
                    </div>
                    <div class="form-group col-6">
                        <label for="phone">Phone Number:</label>
                        <input type="text" id="phone" name="mobile" placeholder="Enter phone number">
                        <small class="text-danger" id="error-phone"></small>
                    </div>
                </div>
                <h4>Address Details</h4>
                <div class="row">
                    <div class="form-group col-6">
                        <label for="addressType">Address Type:</label>
                        <select id="addressType" name="addressType" class="border font-xl">
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                        <small class="text-danger" id="error-addressType"></small>
                        <input type="text" id="customAddressType" name="customAddressType" placeholder="Enter address type" style="display: none;">
                        <small class="text-danger" id="error-customAddressType"></small>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-6">
                        <label for="house_flat">House/Flat Number:</label>
                        <input type="text" id="house_flat" name="house_flat" placeholder="Enter house or flat number">
                        <small class="text-danger" id="error-house_flat"></small>
                    </div>
                    <div class="form-group col-6">
                        <label for="street">Street:</label>
                        <input type="text" id="street" name="street" placeholder="Enter street name">
                        <small class="text-danger" id="error-street"></small>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-6">
                        <label for="city">Village or City :</label>
                        <input type="text" id="city" name="village_city" placeholder="Enter city">
                        <small class="text-danger" id="error-city"></small>
                    </div>
                    <div class="form-group col-6">
                        <label for="district">District:</label>
                        <input type="text" id="district" name="district" placeholder="Enter district">
                        <small class="text-danger" id="error-district"></small>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-6">
                        <label for="state">State:</label>
                        <input type="text" id="state" name="state" placeholder="Enter state">
                        <small class="text-danger" id="error-state"></small>
                    </div>
                    <div class="form-group col-6">
                        <label for="pincode">Pincode:</label>
                        <input type="number" id="pincode" name="pincode" placeholder="Enter pincode">
                        <small class="text-danger" id="error-pincode"></small>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-8">
                        <label for="landmark">Landmark (Optional):</label>
                        <input type="text" id="landmark" name="landmark" placeholder="Enter landmark">
                    </div>
                    <div class="form-group col-4">
                        <label for="alt_phone">Alt Phone (Optional):</label>
                        <input type="number" id="alt_phone" name="alt_phone" placeholder="Enter alternative phone number">
                    </div>
                </div>
            </form>
        `,
        focusConfirm: false,
        showCancelButton: true,
        confirmButtonText: 'Submit',
        didOpen: () => {
            $('#addressType').change(function () {
                if ($(this).val() === "Other") {
                    $('#customAddressType').show().attr('required', true);
                } else {
                    $('#customAddressType').hide().val('').removeAttr('required');
                    $('#error-customAddressType').text('');
                }
            });
        },
        preConfirm: () => {
            // Clear previous errors
            $('small.text-danger').text('');

            const formData = {
                fullname: $('#username').val().trim(),
                mobile: $('#phone').val().trim(),
                alt_phone: $('#alt_phone').val().trim(),
                addressType: $('#addressType').val() === "Other" ? $('#customAddressType').val().trim() : $('#addressType').val(),
                house_flat: $('#house_flat').val().trim(),
                street: $('#street').val().trim(),
                village_city: $('#city').val().trim(),
                district: $('#district').val().trim(),
                state: $('#state').val().trim(),
                pincode: $('#pincode').val().trim(),
                landmark: $('#landmark').val().trim(),
            };

            let isValid = true;

            // Validation
            if (!formData.fullname) {
                $('#error-username').text('Full name is required');
                isValid = false;
            }

            if (!formData.mobile || !/^\d{10}$/.test(formData.mobile)) {
                $('#error-phone').text('Enter a valid 10-digit phone number');
                isValid = false;
            }

            if ($('#addressType').val() === "Other" && !$('#customAddressType').val().trim()) {
                $('#error-customAddressType').text('Please enter address type');
                isValid = false;
            }

            if (!formData.house_flat) {
                $('#error-house_flat').text('House/Flat number is required');
                isValid = false;
            }

            if (!formData.street) {
                $('#error-street').text('Street is required');
                isValid = false;
            }

            if (!formData.village_city) {
                $('#error-city').text('City is required');
                isValid = false;
            }

            if (!formData.district) {
                $('#error-district').text('District is required');
                isValid = false;
            }

            if (!formData.state) {
                $('#error-state').text('State is required');
                isValid = false;
            }

            if (!formData.pincode || !/^\d{6}$/.test(formData.pincode)) {
                $('#error-pincode').text('Enter a valid 6-digit pincode');
                isValid = false;
            }

            if (!isValid) return false;

            return fetch('/addAddress', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            }).then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || "Failed to add address");
                    });
                }
                return response.json();
            }).catch(error => {
                Swal.showValidationMessage(`Error: ${error.message}`);
            });
        }
    }).then(result => {
        if (result.isConfirmed && !Swal.isLoading()) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address has been added successfully.'
            }).then(() => {
                window.location.reload();
            });
        }
    });
});

});


let grandTotal = <%= grandTotal %>;
            var userData = {
              name: '<%= userData.name %>',
              phone: '<%= userData.phone %>',
              email: '<%= userData.email %>',
              _id: '<%= userData._id %>',
            };
          
            document.getElementById('checkoutForm').addEventListener('submit', async function (event) {
              event.preventDefault();
              await submitCheckout();
            });
          
            async function submitCheckout() {
              try {
                const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
                const paymentOption = document.querySelector('input[name="payment_option"]:checked');
                const additionalInfo = document.getElementById('additionalInformation')?.value || '';
          
                if (!selectedAddress) {
                  Swal.fire({
                    icon: 'warning',
                    title: 'No Address Selected',
                    text: 'Please select an address before placing the order.'
                  });
                  return;
                }
          
                if (!paymentOption) {
                  Swal.fire({
                    icon: 'warning',
                    title: 'No Payment Option',
                    text: 'Please select a payment option before placing the order.'
                  });
                  return;
                }
          
                const formData = {
                  grandTotal,
                  userData,
                  addressId: selectedAddress.value,
                  paymentType: paymentOption.value,
                  additionalInformation: additionalInfo
                };
          
                console.log("Checkout FormData:", formData);
          
                if (paymentOption.value === 'cod') {
                  const confirmation = await Swal.fire({
                    title: 'Confirm Order?',
                    text: 'Do you want to place this order?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, place order!'
                  });
          
                  if (!confirmation.isConfirmed) return;
          
                  await placeOrder(formData);
          
                } else if (paymentOption.value === 'razorpay') {
          
                  const confirmation = await Swal.fire({
                    title: 'Make Payment?',
                    text: 'You will be redirected to Razorpay to complete the payment.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, proceed to payment!'
                  });
          
                  if (!confirmation.isConfirmed) return;
          
                  // Call Razorpay payment flow
                  const razorpayResult = await payNow(formData);
          
                  console.log('razorpayResult:', razorpayResult);
          
                  if (razorpayResult && razorpayResult.paymentVerified) {
                    formData.razorpayOrderId = razorpayResult.razorpay_order_id;
                    formData.razorpayPaymentId = razorpayResult.razorpay_payment_id;
          
                    await placeOrder(formData);
                  } else {
                    // Redirect to Payment Failed page if not successful
                    window.location.href = '/payment-failed';
                  }
                }
                else if(paymentOption.value==='wallet'){
                  console.log('wallet option selected')
                  const confirmation = await Swal.fire({
                    title: 'Confirm Order?',
                    text: 'Do you want to place this order?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, place order!'
                  });
          
                  if (!confirmation.isConfirmed) return;
          
                  await placeOrder(formData);
          
                }
          
              } catch (error) {
                console.error('Checkout error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'An unexpected error occurred. Please try again later.'
                });
              }
            }
          
            async function placeOrder(formData) {
              try {
                const response = await fetch('/createOrder', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(formData)
                });
          
                const result = await response.json();
          
                if (response.ok) {
                  await Swal.fire({
                    icon: 'success',
                    color: '#06b406',
                    title: 'Order Placed!',
                    text: 'Your order has been placed successfully.',
                    background: 'url(https://static.licdn.com/aero-v1/sc/h/f55std566o6x1mr1opdy220oi?1741952662218)',
                    backdrop: `rgba(24, 19, 18, 0.53)`
                  });
          
                  window.location.href = `/viewOrder/${result.orderId}`;
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: result.message || 'Something went wrong. Please try again.'
                  });
                }
              } catch (error) {
                console.error('Order error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'Unable to place the order. Please try again later.'
                });
              }
            }
          
            async function payNow(formData) {
              try {
                const response = await fetch('/create-razorpay-order', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    amount: formData.grandTotal,
                    currency: 'INR',
                    receipt: `receipt_${Date.now()}`,
                    notes: { user: formData.userData._id }
                  })
                });
          
                const order = await response.json();
          
                if (!order || !order.id) {
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to create Razorpay order.'
                  });
                  return null;
                }
          
                return new Promise((resolve) => {
                  const options = {
                    key: 'rzp_test_43w6NpS9BBjZU4',
                    amount: order.amount,
                    currency: order.currency,
                    name: 'CUBECRAZE',
                    description: 'Order Payment',
                    order_id: order.id,
                    handler: async function (response) {
                      try {
                        const verifyRes = await fetch('/verify-razorpay-payment', {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature
                          })
                        });
                        const verifyResult = await verifyRes.json();
                        if (verifyResult.status === 'ok') {
                          resolve({
                            paymentVerified: true,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id
                          });
                        } else {
                          resolve({ paymentVerified: false });
                        }
          
                      } catch (error) {
                        console.error('Verification error:', error);
                        resolve({ paymentVerified: false });
                      }
                    },
                    modal: {
                      ondismiss: function () {
                        // User closed the modal without payment
                        console.log('Modal closed by user');
                        window.location.href = '/payment-failed'; // Redirect to payment failed page
                      }
                    },
                    prefill: {
                      name: userData.name,
                      email: userData.email,
                      contact: userData.phone
                    },
                    theme: {
                      color: '#F27254'
                    }
                  };
          
                  const rzp = new Razorpay(options);
                  rzp.open();
                });
          
              } catch (error) {
                console.error('Razorpay error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'Failed to initiate payment. Please try again.'
                });
                return null;
              }
            }
            document.getElementById('removeCoupon').addEventListener('click', function () {
    window.location.href = `/cartCheckout`;
});
document.getElementById('applyCoupon').addEventListener('click', function () {
    let selectedCoupon = document.getElementById('couponSelect').value;
    if (!selectedCoupon) {
    Swal.fire('Please select a coupon','','info')
            return;
    }
    // Redirect to checkout with the selected coupon code as a query parameter
    window.location.href = `/cartCheckout?couponCode=${encodeURIComponent(selectedCoupon)}`;
});
          </script>
    <%- include('partials/scriptTags.ejs') %>
</body>
